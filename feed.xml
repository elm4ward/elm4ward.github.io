<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mauersegler.swift</title>
    <description>In the long term, this will be a blog about using Swift. 
</description>
    <link>http://elm4ward.github.io/</link>
    <atom:link href="http://elm4ward.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 02 Apr 2016 16:12:01 +0200</pubDate>
    <lastBuildDate>Sat, 02 Apr 2016 16:12:01 +0200</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Protocol-lisions</title>
        <description>&lt;h1 id=&quot;fetch-it-change-it-merge-it-code-it&quot;&gt;Fetch it, Change it, Merge it: Code it&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Let`s talk about writing code.&lt;/em&gt;
When writing code, you gotta be lazy. Pretty ambiguous but correct in every sense.
Being lazy in the sense of ‚Äúshy of writing code‚Äù can be awesome.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not having written much LOC speeds up understanding your own code&lt;/li&gt;
  &lt;li&gt;Not wanting to write much code lets you think more about the structure of your code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shenanigans!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let`s talk about protocols.&lt;/em&gt;
It often appears that the data in your app has some kind of flow. Between all those ifs and elses, somewhere deep down is a spine. It better be strong and hard to stand all your pretty features you add.
In order to embrace safety of your data flow, let‚Äôs define a pretty simple flow in form of protocols.&lt;/p&gt;

&lt;h2 id=&quot;pro-protocols-&quot;&gt;Pro: Protocols üëç&lt;/h2&gt;

&lt;p&gt;I will not give an explanation what protocols are - so this might be a good point to ensure you have read &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html&quot;&gt;the Swift Documentation about Protocols&lt;/a&gt;.
Lets jump into some totally reasonable definitions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Fetchable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fetchable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a placeholder for what type we wanna fetch&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// should be associatedtype if swift 2.2&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FetchedType&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// static access for all elements&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FetchedType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ok - next up:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Changeable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Changeable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a placeholder for what type we wanna as a result after the change&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// should be associatedtype if swift 2.2&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChangeResultType&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// static access for a closure to modify Self to ChangeResultType&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;changeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChangeResultType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ok - finally:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mergeable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a placeholder for what type we wanna as a result after the merge&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// should be associatedtype if swift 2.2&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MergeResultType&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// static access for a closure to merge Self with MergeResultType&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MergeResultType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MergeResultType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// static access to a initial merge value&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MergeResultType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Thats its&lt;/strong&gt;. 
Thats all we know. 
No interconnection until now.&lt;/p&gt;

&lt;p&gt;Those protocols dont know each other - so they are super-reusalble‚Ñ¢.
&lt;em&gt;And of course, it is possible to use funcs instead of closures&lt;/em&gt;, but its a lazy post.&lt;/p&gt;

&lt;h2 id=&quot;give-it-a-good-stir-to-combine-&quot;&gt;Give it a good stir to combine üç∞&lt;/h2&gt;

&lt;p&gt;Now comes the first part that will boost productivity.
Lets define a func where all those protocols work together.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Lets start by extending Fetchable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fetchable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// ensuring the fetched type is also Changeable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FetchedType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Changeable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and the result of the change is Mergeable&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FetchedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChangeResultType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mergeable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  
  &lt;span class=&quot;c1&quot;&gt;/// some litle shortcuts&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MergeableType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FetchedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChangeResultType&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ChangeableType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FetchedType&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;/// the static method has access to all known Protocol Types from the extension definition.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// lets run them all &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchItChangeItMergeIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MergeableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MergeResultType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// fetch it&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// change it&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ChangeableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// merge it&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MergeableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MergeableType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So far - all valid swift - but nothing will happen. üôÑ&lt;/p&gt;

&lt;p&gt;All that was defined so far is based on protocols. 
There is no actual implementation of the protocols. 
But in terms of the &lt;em&gt;abstract protocol flow&lt;/em&gt; we already know what happens.&lt;/p&gt;

&lt;p&gt;This is like a universal truth in our code.
&lt;strong&gt;And universal truth is great.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;with-less-code-comes-great-responsibility-&quot;&gt;With less code comes great responsibility üé©&lt;/h2&gt;

&lt;p&gt;In fact - using those protocols is the most boring part. 
There is hardly something to do. Not kidding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Fetchable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Changeable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// yay...  &lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// yay...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;changeTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Mergeable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// yay...&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetchItChangeItMergeIt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// -&amp;gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The point is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;You have to know when to use those things.&lt;/strong&gt;
 It`s like &lt;em&gt;typesafe loosely coupled&lt;/em&gt; power.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plus you need the right abstraction for the types.&lt;/strong&gt;
Like in the example on the top you cannot define another &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; that is Changeable to &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;.
You have to workaround those situations by Types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://elm4ward.github.io/assets/protocolflow.jpg&quot; alt=&quot;Playground&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;have-fun-playing-&quot;&gt;Have fun playing ‚õ≥Ô∏è&lt;/h2&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9cfbdea339992051f51870265052f7ec.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;üëª Feel free to hit me on twitter.
&lt;a href=&quot;https://twitter.com/elmkretzer&quot;&gt;@elmkretzer&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 14:10:14 +0200</pubDate>
        <link>http://elm4ward.github.io/swift/protocols/2016/04/02/protocollisions.html</link>
        <guid isPermaLink="true">http://elm4ward.github.io/swift/protocols/2016/04/02/protocollisions.html</guid>
        
        
        <category>swift</category>
        
        <category>protocols</category>
        
      </item>
    
      <item>
        <title>Monads are yay &amp; Comonads are yayer</title>
        <description>&lt;h1 id=&quot;monads-comonads-come-on-go-nuts&quot;&gt;Monads, Comonads, come on, go nuts&lt;/h1&gt;

&lt;p&gt;There is a stormy discussion about writing Swift in a functional manner. I am not gonna dive deep into it. But i like to demonstrate one particular piece of Type, coming out of the FP world: The &lt;em&gt;Commonad&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Even if Swift is missing so called Higher Kinded Types &lt;em&gt;(TypeConstructors or Types that create Types a.k.a. * -&amp;gt; *)&lt;/em&gt;, we got some monadic flavored Types in the stdlib. Optionals for example. If you feel unsure about understanding monads, don`t panic. Someday it will click.&lt;/p&gt;

&lt;p&gt;Anyway, when you read on about the category theory stuff, you might come across a Type called &lt;em&gt;Comonad&lt;/em&gt;. Described as the categorical dual to a Monad it sounds fairly abstract and possibly without use case for the 9-5 programmer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But as always, it helps to try it out yourself&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Beware: Adding a commandic type in swift is possible. Wether you see a use case is up to you.&lt;/p&gt;

&lt;h2 id=&quot;monads-&quot;&gt;Monads üì¶&lt;/h2&gt;

&lt;p&gt;The easy way - missing out &lt;strong&gt;many&lt;/strong&gt; important parts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// simplified flatMap method of Optional&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;comonads-&quot;&gt;Comonads üéä&lt;/h2&gt;

&lt;p&gt;A comonad flips the direction of the provided flatMap function, and the method name itself gets renamed to &lt;em&gt;extend&lt;/em&gt;.
So if we wanna make the Optional Type a Comonad it would also need to have an &lt;em&gt;extend&lt;/em&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// hypothetical, silly extend method of optional &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Wrapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want the full fledged answer: &lt;a href=&quot;https://en.wikipedia.org/wiki/Monad_(category_theory)&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that type signature makes no sense with Optionals.
And to be honest: Its kinda hard to see what it does at all.
So lets build a Type that makes sense.&lt;/p&gt;

&lt;h2 id=&quot;imagine-&quot;&gt;Imagine üí≠&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;‚òëÔ∏è You have an Array of Ints.&lt;/li&gt;
  &lt;li&gt;‚òëÔ∏è And you know you point to a certain position within that array.&lt;/li&gt;
  &lt;li&gt;‚òëÔ∏è And now you want to get the average of the value at the position, the position before, the position after.&lt;/li&gt;
  &lt;li&gt;‚òëÔ∏è And in the next step you wanna know if this calculated average is higher than the average of the position before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Doing this in an imperative way is possible. easy. But it can get a bit messy, and might not really be reusable.&lt;/p&gt;

&lt;h2 id=&quot;tada-time-for-comonad-&quot;&gt;Tada, Time for Comonad. üéâ&lt;/h2&gt;

&lt;p&gt;I am not gonna write too much in advance. You should be able to run the following snippet in a playground.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/3c03db368cb2e74677a76e1693cddec4.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;congrats-you-made-it&quot;&gt;Congrats, you made it.&lt;/h2&gt;

&lt;p&gt;Here an example out of the playground:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://elm4ward.github.io/assets/comonad-array-zipper.jpg&quot; alt=&quot;Playground&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As people often say: Once you understand the concept of Monads you loose the capability to explain them.
The same is valid for comonads. 
But keep in mind:
 - Comonads care deeply about their structure 
 - Comonads are great for things where you have a position in a structure (e.g. TreeZipper)
 - Comonads might not be relevant to the code you write next week&lt;/p&gt;

&lt;p&gt;üëª Feel free to hit me on twitter.
 &lt;a href=&quot;https://twitter.com/elmkretzer&quot;&gt;@elmkretzer&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Mar 2016 22:40:14 +0200</pubDate>
        <link>http://elm4ward.github.io/swift/functional/comonad/2016/03/30/monads-comonads.html</link>
        <guid isPermaLink="true">http://elm4ward.github.io/swift/functional/comonad/2016/03/30/monads-comonads.html</guid>
        
        
        <category>swift</category>
        
        <category>functional</category>
        
        <category>comonad</category>
        
      </item>
    
      <item>
        <title>Kinda unwrap Optionals</title>
        <description>&lt;p&gt;Optionals. Sometimes it is a little bit ugly to force unwrap things.&lt;/p&gt;

&lt;p&gt;You know there is a value. You add a &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; 
  But then things change and your code breaks.
  So in case you need to gracefully handle this, you add &lt;code class=&quot;highlighter-rouge&quot;&gt;a.maybeVal ?? &quot;&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Much better, but possibly a lot to read when used in combination with other stuff.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let r4 = (a1.a ?? &quot;&quot;) + (a2.a ?? &quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But swift gives us protocols. üéâ
  So wouldnt it be nice to (maybe) have another option ‚Ä¶&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/ca69c7114926ff9c72ec.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Sat, 19 Mar 2016 14:29:14 +0100</pubDate>
        <link>http://elm4ward.github.io/swift/optionals/protocols/2016/03/19/kinda-unwrap-optionals.html</link>
        <guid isPermaLink="true">http://elm4ward.github.io/swift/optionals/protocols/2016/03/19/kinda-unwrap-optionals.html</guid>
        
        
        <category>swift</category>
        
        <category>optionals</category>
        
        <category>protocols</category>
        
      </item>
    
  </channel>
</rss>
